/* eslint-env mocha */
'use strict';


var chai = require('chai');
var expect = chai.expect;
const assertArrays = require('chai-arrays');
const assertSortedArrays = require('chai-sorted');
var aux = require('../auxiliary/aux.js');
chai.use(assertArrays);
chai.use(assertSortedArrays);
//var aux = require('../auxiliary/aux.js')
var swap = require('../../lab1.js').swap;
var swapArray = require('../../lab1.js').swapArray;
var changeToBinary = require('../../lab1.js').changeToBinary;
var binLength = require('../../lab1.js').binLength;
var genRandomArray = aux.genRandomArray;
var reB = require('../dec/deC.js').reB;
var deC = require('../dec/deC.js').deC;
var f1 = aux.f1;
var f2 = aux.f2;
var f3 = aux.f3;
var f4 = aux.f4;

describe('Test swap -', () => {
  it('Has the swap function been altered?', () => {
    let code = swap.toString();
    code = reB(deC(code));
    let num = f1.toString();
    num = reB(deC(num));
    expect(code).to.be.equalTo(num);
  });
});

describe('Test swapArray -', () => {
  it('swapArray should use swap function', () => {
    let code = swapArray.toString();
    code = reB(deC(code));
    let num = code.includes("swap(");
    expect(num).to.be.true;
  });

  it('swapArray should return an array', () => {
    let testA = genRandomArray(13);
    let num = swapArray(testA);
    expect(num).to.be.array();
  });
  it('swapArray return the flipped version of input array', () => {
    let testA1 = genRandomArray(10);
    let testA2 = genRandomArray(13);
    let n1 = testA1.slice();
    let n2 = testA2.slice();
    let num = swapArray(testA1).slice();
    let num1 = swapArray(testA2).slice();
    let num2 = f2(n1).slice();
    let num3 = f2(n2).slice();
    expect(num).to.be.equalTo(num2);
    expect(num1).to.be.equalTo(num3);
  });
});

describe('Test changeToBinary -', () => {
  it('swapArray should use a while loop', () => {
    let code = changeToBinary.toString();
    code = reB(deC(code));
    let num = code.includes("while(");
    expect(num).to.be.true;
  });
});
