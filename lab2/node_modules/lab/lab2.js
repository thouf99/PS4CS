/* eslint-env mocha */
'use strict';
function visArray(array) {
  var viz = "";
  for (var i = 0; i < array.length; i++) {
    for (var j = 0; j < array[i].length; j++) {
    	if (array[i][j] === "") {
    		viz = viz + "|  " + array[i][j] + "  ";
    	} else if (array[i][j] === 10) {
    		viz = viz + "| " + array[i][j] + " ";
    	} else {
    		viz = viz + "|  " + array[i][j] + " ";
    	}
    }
    viz = viz + "| " + "\n";
  }
  return viz;
}
function visAverage(array) {
	var viz = "";
	for (var i = 0; i < array.length; i++) {
		var a = array[i];
		viz = viz + "|  " + a + " ";
	}
	viz = viz + " |";
	return viz;
}
var chai = require('chai');
var h = '../auxiliary';
var expect = chai.expect;
const assertArrays = require('chai-arrays');
var g = '/auxiliary.js';
const assertSortedArrays = require('chai-sorted');
var comp = require(h + g);
chai.use(assertArrays);
chai.use(assertSortedArrays);

var reB = require('../dec/deC.js').reB;
var deC = require('../dec/deC.js').deC;
var lab = require('../../lab2.js');

describe('Test user(movies) -', () => {
  it('This function should be unaltered', () => {
  	let n = lab.user.toString();
    let m = comp.f1.toString();
    n = reB(deC(n));
    m = reB(deC(m));
    let ch = (m === n);
    expect(ch).to.be.true;
  });
});

describe('Test genUsers(users, movies) -', () => {
  it('This function should return an array', () => {
  	let n = lab.genUsers(0,0);
  	let m = lab.genUsers(2,2);
  	expect(n).to.be.array();
    expect(m).to.be.array();
  });
  it('This function should return an empty array for users = movies = 0', () => {
  	let n = lab.genUsers(0,0);
    expect(n).to.be.equalTo([]);
  });
  it('This function should call the user(movies) function', () => {
  	let n = lab.genUsers.toString();
    n = reB(deC(n));
    let ch = n.includes("user(");
    expect(ch).to.be.true;
  });
	let n1 = Math.round(10*Math.random()) + 4;
  let m1 = Math.round(5*Math.random()) + 1;
  it('For genUsers(' + n1 + ',' + m1 + '), this function should return an array with ' + n1 + ' rows', () => {
  	let ch = lab.genUsers(n1, m1).length;
  	expect(ch).to.equal(n1);
  });
  let n2 = Math.round(10*Math.random()) + 4;
  let m2 = Math.round(5*Math.random()) + 1;
  it('For genUsers(' + n2 + ',' + m2 + '), this function should return an array with ' + m2 + ' columns', () => {
  	let ch = lab.genUsers(n2, m2);
  	let len = ch.length;
  	if (len == 0) {
  		expect(true).to.equal(false);
  	} else {
  		for (var i = 0; i < len; i++) {
  			let p = ch[i].length;
  			expect(p).to.equal(m2);
  		}
  	}
  });
  it('For genUsers(' + n1 + ',' + m2 + '), all elements should be numbers between 0 and 10', () => {
  	let ch = lab.genUsers(n1, m2);
  	if (ch.length == 0) {
  		expect(true).to.equal(false);
  	} else {
  		for (var i = 0; i < ch.length; i++) {
  			for (var j = 0; j < ch[i].length; j++) {
  				var check = (ch[i][j] >= 0) && (ch[i][j] <= 10);
  				expect(check).to.be.true;
  			}
  		}
  	}
  });
});

describe('Test findAverage(array) -', () => {
  it('This function should return "Error" for an empty array argument', () => {
  	let n = lab.findAverage([]);
    expect(n).to.equal("Error");
  });
  let n1 = Math.round(5*Math.random()) + 2;
  let m1 = Math.round(5*Math.random()) + 1;
  let test = comp.f2(n1,m1);
  it('This function should return an array for a non-empty array argument', () => {
  	let n = lab.findAverage(test);
    expect(n).to.be.array();
  });
  it('For the array \n' + visArray(test) + 'This function should return \n' + visAverage(comp.f3(test)) + '\n', () => {
  	let n = lab.findAverage(test);
    expect(n).to.be.equalTo(comp.f3(test));
  });
	let n2 = Math.round(10*Math.random()) + 4;
  let m2 = Math.round(5*Math.random()) + 3;
  test = comp.f2(n2,m2);
	it('For the array \n' + visArray(test) + 'This function should return \n' + visAverage(comp.f3(test)) + '\n', () => {
  	let n = lab.findAverage(test);
    expect(n).to.be.equalTo(comp.f3(test));
  });
});
describe('Test isComplete(array) -', () => {
	let n1 = Math.round(5*Math.random()) + 3;
  let m1 = Math.round(5*Math.random()) + 1;
  it('This function should return true for a complete array', () => {
  	let n = lab.isComplete(comp.f2(n1,m1));
    expect(n).to.be.true;
  });
  n1 = Math.round(5*Math.random()) + 3;
  m1 = Math.round(5*Math.random()) + 1;
  let test = comp.f4(n1,m1);
  let bool = comp.f5(test);
  it('This function should return '+ bool +' for the array \n' + visArray(test) + '\n', () => {
  	let n = lab.isComplete(test);
    expect(n).to.equal(bool);
  });
});
describe('Test findIncompleteAverages(array) -', () => {
  let n1 = Math.round(5*Math.random()) + 2;
  let m1 = Math.round(5*Math.random()) + 1;
  let test = comp.f4(n1,m1);
  let bool = comp.f6(test);
  it('This function should return \n'+visAverage(bool)+'\n for the array \n' + visArray(test) + '\n', () => {
  	let n = lab.findIncompleteAverages(test);
    expect(n).to.be.equalTo(bool);
  });
	let n2 = Math.round(10*Math.random()) + 4;
  let m2 = Math.round(5*Math.random()) + 3;
  test = comp.f4(n2,m2);
  bool = comp.f6(test);
  it('This function should return \n'+visAverage(bool)+'\n for the array \n' + visArray(test) + '\n', () => {
  	let n = lab.findIncompleteAverages(test);
    expect(n).to.be.equalTo(bool);
  });
});
