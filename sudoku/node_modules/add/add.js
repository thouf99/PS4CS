function makeRows(row) {
	var puzzle = [];
}

function permuteRow(row, p) {

}

function permutePuzzle(puzzle, p, q, r) {
	var perms = [p,q,r];
    for (var i=0; i<3; i++){
        puzzle[i + 1] = permuteRow(puzzle[i + 1], perms[i]);
    }
    return puzzle;
}

function linearSearch(array, item) {
	var n = array.length;
	for (var i = 0; i < n; i++) {
		if (array[i] == item) {
			return true;
		}
 	}
	return false;
}

function checkColumn(puzzle, j) {

}

function colCheck(puzzle) {

}

function makeGrid(puzzle, row1, row2, col1, col2) {
	//this copies all elements in a grid from co-ordinates (row1, col1) to (row2,col2) to an array
	var array = [];
	for (var i = row1; i <= row2; i++) {
		for (var j = col1; j <= col2; j++) {
			array.push(puzzle[i][j]);
		}
	}
	return array;
}

function checkGrid(puzzle, row1, row2, col1, col2) {

}

function checkGrids(puzzle) {

}

function makeSolution(row) {

}

// a function to randomly select n (row,column) entries of a 2d array with size columns and size rows, where size is assumed to be an integer and n is also assumed to be an integer
function entriesToDel(n) {
	if (n <= 16) {
		// this creates an array of all the rows and column indices
		var array = [];
		for (var i = 0; i < 4; i++) {
			for (var j = 0; j < 4; j++) {
				array[j+(4 * i)] = [i,j];
			}
		}
		// this creates a new array, called array2 to store randomly chose elements of the array that will be removed, and then removes those elements from array
		var num = 16;
		var array2 = [];
		for (var i = 0; i < n; i++) {
			var x = Math.round( (num - i - 1) * Math.random() );
			array2[i] = array[x];
			array.splice(x,1);
		}
		return array2;
	}
	return "Number of elements to delete exceeds size of array!";
}

function genPuzzle(row, n) {

}

module.exports = {entriesToDel : entriesToDel, makeRows : makeRows, permuteRow : permuteRow, permutePuzzle : permutePuzzle, checkColumn : checkColumn, colCheck : colCheck, checkGrid : checkGrid, checkGrids : checkGrids, makeSolution : makeSolution, genPuzzle : genPuzzle}
