//TASK ONE

function makeRows(row) {
	var puzzle = [];
    for (let i=0; i<4; i++){
        puzzle.push(row.slice());
    }
    return puzzle;
}

//TASK TWO
// this is the constructor of the queue data structure
function Queue() {
	this.arr = [];
	this.head = function() {
		return this.arr[0];
	};
	this.dequeue = function() {
		if (this.arr.length == 0) {
			return "Queue underflow!";
		} else {
			return this.arr.shift();
		}
	};
	this.enqueue = function(o) {
		this.arr.push(o);
	};
	this.isEmpty = function() {
			return this.arr.length == 0;
	};
}

function permuteRow(row, p) {

    // initialize queue
    let q = new Queue();


    // p.1  populate queue
    for (let i=0; i<row.length; i++){
        q.enqueue(row[i]);
    }

    // p.2  permute queue 'p' places to the left
    for (let i=0; i<p; i++){
        let head = q.head();
        q.dequeue();
        q.enqueue(head);
    }

    // p.3  re-assign array values given queue
    let i=0;
    while (!q.isEmpty()){
        let head = q.head();
        row[i]   = head;
        q.dequeue();
        i+=1;
    }


    return row;

}

//TASK THREE
/*
function permutePuzzle(puzzle, p, q, r) {
    for (let i=0; i<3; i++){
        permuteRow(puzzle[i + 1], [p,q,r][i]);
    }
    return puzzle;
}
*/
//TASK FOUR

function linearSearch(array, item) {
	var n = array.length;
	for (var i = 0; i < n; i++) {
		if (array[i] == item) {
			return true;
		}
 	}
	return false;
}

function checkColumn(puzzle, j) {
    let jCol = [puzzle[0][j], puzzle[1][j], puzzle[2][j], puzzle[3][j]];
    for (let i=1; i<=4; i++){
        if (!linearSearch(jCol, i)){
            return false;
        }
    }
    return true;
}

//TASK FIVE

function colCheck(puzzle) {
    let colsValid = true;
    for (let i=0; i<4; i++){
        if (!checkColumn(puzzle, i)){
            return false;
        }
    }
    return true;
}


function makeGrid(puzzle, row1, row2, col1, col2) {
    //this copies all elements in a grid from co-ordinates (row1, col1) to (row2,col2) to an array
    var array = [];
    for (var i = row1; i <= row2; i++) {
        for (var j = col1; j <= col2; j++) {
            array.push(puzzle[i][j]);
        }
    }
    return array;
}

function checkGrid(puzzle, row1, row2, col1, col2) {
    var grid = makeGrid(puzzle, row1, row2, col1, col2);
    for (var i=1; i<=4; i++){
        if (!linearSearch(grid, i)){
            return false;
        }
    }
    return true;
}

// The following function is used to visualise the puzzles

function visPuzzle(puzzle) {
	var viz = "";

	for (var i = 0; i < puzzle.length; i++) {
		for (var j = 0; j < puzzle.length; j++) {
			viz = viz + "----";
		}
		viz = viz + "-\n";
		for (var j = 0; j < puzzle.length; j++) {
			viz = viz + "| " + puzzle[i][j] + " ";
		}
		viz = viz + "| " + "\n";
	}
	for (var j = 0; j < puzzle.length; j++) {
			viz = viz + "----";
	}
	viz = viz + "-";

	return viz;
}

// DO NOT DELETE BELOW THIS LINE OR NOTHING WILL WORK AND YOU MAY GET NO MARKS

module.exports = {linearSearch : linearSearch, makeGrid : makeGrid, queue : Queue, makeRows : makeRows, checkGrid : checkGrid, colCheck : colCheck, checkColumn : checkColumn, permuteRow : permuteRow}
